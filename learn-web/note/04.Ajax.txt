一.load() 方法
1.作用
载入远程 HTML 文件代码并插入至 DOM 中

2.参数说明
load(url, [data], [callback])
url:待装入 HTML 网页网址。url和选择器之间有一个空格。
data:发送至服务器的 key/value 数据。默认使用 GET 方式，传递附加参数时自动转换为 POST 方式。
callback:载入成功时回调函数。
例
$("#send").click(function(){
      $("#resText").load("test.html .para",function (responseText, textStatus, XMLHttpRequest){
                 alert( $(this).html() );	//在这里this指向的是当前的DOM对象，即 $("#iptText")[0]
                 alert(responseText);       //请求返回的内容
                 alert(textStatus);		    //请求状态：success，error
                 alert(XMLHttpRequest);     //XMLHttpRequest对象
    });
})


二.$.get()方法和$.post()方法
注意，$.get()方法和$.post()方法是jQuery中的全局函数

1.$.get()方法
这是一个简单的 GET 请求功能以取代复杂 $.ajax
$.get(url, [data], [callback], [type])
url:待载入页面的URL地址
data:待发送 Key/value 参数。
callback:载入成功时回调函数。
type:返回内容格式，xml, html, script, json, text, _default。

例
$.get("test.cgi", { name: "John", time: "2pm" },
  function(data){
    alert("Data Loaded: " + data);
});

2.$.post()方法 这是一个简单的 POST 请求功能以取代复杂 $.ajax
与$.get()方法的结构和使用方法一致，区别如下
(1)GET请求参数跟在URL后进行传递，而POST请求作为HTTP消息的实体内容发送给Web服务器。在Ajax中时用户不可见；
(2)GET请求对传输的数据有大小限制(2KB)，而使用POST方式传递的数据量要比GET方式大得多
(3)GET请求会被浏览器缓存起来，存在安全问题；


三.$.getScript()方法和$.getJson()方法
1.$.getScript()
动态加载Script文件，代理如下两种方法
$(document.createElement("script")).attr("src","test.js").appendTo("head");
或 $("<script type='text/javascript' src='test.js' />").appendTo("head");

$.getScript(url, [callback])
url:待载入 JS 文件地址。
callback:成功载入后回调函数。
例
$.getScript("test.js", function(){
  alert("Script loaded and executed.");
});


2.$.getJson()
用于加载JSON文件，与$.getScript()方法用法相同
$.getJSON(url, [data], [callback])
url:发送请求地址。
data:待发送 Key/value 参数。
callback:载入成功时回调函数。
例：
$.getJSON("url",
    function(data){
        $.each(data.items, function( i,item ){
            $("<img class='para'/> ").attr("src", item.media.m ).appendTo("#resText");
            if ( i == 3 ) {
                return false;
            }
        });
    }
);


3.$.ajax
$.ajax(url,[settings])
注意，所有的选项都可以通过$.ajaxSetup()函数来全局设置。

参数名称            类型                说明
url                 String              一个用来包含发送请求的URL字符串
type                String              (默认: "GET") 请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它HTTP请求方法，如PUT和DELETE也可以使用，但仅部分浏览器支持。
timeout             Number              设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。
async               Boolean             (默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。
cache               Boolean             (默认: true,dataType为script和jsonp时默认为false) jQuery 1.2 新功能，设置为 false 将不缓存此页面。
data                Object或String      "name=John&location=Boston" 或 {name:"John",location:"Boston"},默认情况下Object会被转换为字符串，GET 请求中将附加在 URL 后。
processData         Boolean             (默认: true) 转化data选项传递对象，为查询字符串，form元素默认enctype="application/x-www-form-urlencoded"的要求。
dataType            String              预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如XML MIME类型就被识别为XML。
                                        "xml": 返回 XML 文档，可用 jQuery 处理。
                                        "html": 返回纯文本 HTML 信息；包含的script标签会在插入dom时执行。
                                        "script": 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了"cache"参数。'''注意：'''在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(因为将使用DOM的script标签来加载)
                                        "json": 返回 JSON 数据 。
                                        "jsonp": JSONP 格式。使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。
                                        "text": 返回纯文本字符串
beforeSend()        Function            发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。XMLHttpRequest 对象是唯一的参数。这是一个 Ajax 事件。
complete()          Function            请求完成后回调函数 (请求成功或失败之后均调用)。参数： XMLHttpRequest 对象和一个描述成功请求类型的字符串。
success()           Function            请求成功后的回调函数。参数：由服务器返回，并根据dataType参数进行处理后的数据；描述状态的字符串。还有 jqXHR对象
error()             Function            (默认: 自动判断 (xml 或 html)) 请求失败时调用此函数。有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。错误信息（第二个参数）除了得到null之外，还可能是"timeout", "error", "notmodified" 和 "parsererror"。
global              Boolean             (默认: true) 是否触发全局 AJAX 事件。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的Ajax事件。


例：如下方法可以代理 $.getJson()
$.ajax({
  type: "GET",
  url: "test.json",
  dataType: "json",
  success : function(data){
         $('#resText').empty();
          var html = '';
          $.each( data  , function(commentIndex, comment) {
              html += '<div class="comment"><h6>' + comment['username'] + ':</h6><p class="para">' + comment['content'] + '</p></div>';
          })
         $('#resText').html(html);
  }
});

4.JSONP
支持JSONP的方法有
$.getJson
$.ajax
$.get
实质上是在页面定义一个函数，并通过script标签远程调用一个js文件，并在该js代码中调用定义好的代码以及传入参数
例
$.ajax({
    type: "get",
    async: false,
    url: "http://localhost:8080/learn-web/jsonp",
    dataType: "jsonp",
    jsonp: "callback",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)
    jsonpCallback: "callback",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据
    success: function (json) {
        $("#resText").text(json);
    },
    error: function () {
        alert('fail');
    }
});