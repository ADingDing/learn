一.jQuery中的DOM操作
1.查找节点
(1)查找元素节点
通过选择器 text()方法可以打印节点的文本内容
(2)查找属性节点
jQuery选择器找到元素后，attr()方法获取属性值


2.创建节点 $()
(1)通过使用jQuery工厂函数$()，创建jQuery对象，格式如下:
$(html);
(2)根据传入的html，可以生成文本节点和属性节点，eg:
    var $li = $("<li title='li_new'>li_new</li>");


3.插入节点(文档处理)
方法                      描述                                                          示例
内部插入
append(content|fn)        向每个匹配的元素内部追加内容,function(index, html)            $("p").append("<b>Hello</b>")
appendTo(content)         将元素追加到指定元素中，与append正好颠倒                      $("p").appendTo("div") 向div中追加p元素
prepend(content|fn)       向每个匹配的元素内部前置内容                                  $("p").prepend($(".foo")[0])  $(".foo")的html内容，会被插入到元素p内部的最前面
prependTo(content)        将元素插入指定元素的内部前置位置，正好与prepend颠倒           $("p").prependTo("#foo") 在ID值为foo的元素中前置插入元素p
外部插入
after(content|fn)         在每个匹配的元素之后插入内容，$(A).after(B)，把A插入到B后面   $("p").after("<b>Hello</b>") 在所有段落之后插入一些HTML标记代码
before(content|fn)        在每个匹配的元素之前插入内容，$(A).before(B)，把A插入到B前面  $("p").before("<b>Hello</b>") 在所有段落之前插入一些HTML标记代码
insertAfter(content)      把所有匹配的元素插入到指定的元素的后面，与after颠倒           $("p").insertAfter("#foo") 与 $("#foo").after("p")相同，在id为foo的元素后面插入p元素
insertBefore(content)     把所有匹配的元素插入到指定的元素的前面，与before颠倒          $("p").insertBefore("#foo") 与 $("#foo").before("p")相同，在id为foo的元素前面插入p元素

如果被插入的节点是原有的节点，效果为对原有节点的移动。


4.删除节点
方法                    描述                                                               示例
empty()                 清空匹配的元素集合中子元素（包括文本节点）删除                     $("p").empty() 把所有段落的子元素（包括文本节点）删除
remove([expr])          从DOM中删除所有匹配的元素,移除绑定的事件，附加的数据等             $("p").remove(".hello") 从DOM中把带有hello类的段落删除
detach([expr])          从DOM中删除所有匹配的元素,绑定的事件，附加的数据等会被保留下来     $("p").detach() 从DOM中把所有段落删除

参数  expr 用于筛选元素的jQuery表达式


5.复制节点 clone()
clone([Even[,deepEven]]) 克隆匹配的DOM元素并且返回克隆的副本
参数  Events 指示(true/false)事件处理函数是否会被复制,默认false

创建一个按钮，他可以复制自己，并且他的副本也有同样功能
$("button").click(function(){
  $(this).clone(true).insertAfter(this);
});


6.替换节点
方法                      描述                                                               示例
replaceWith(content|fn)   将所有匹配的元素替换成指定的HTML或DOM元素                          $('.third').replaceWith($('.first')) 移动第一段来替换第三段，而不是复制第一段
replaceAll(selector)      用指定的元素替换掉所有selector匹配到的元素，与replaceWith颠倒      $("<b>Paragraph. </b>").replaceAll("p") 把所有的段落标记替换成加粗标记


在jQuery 1.3.2中，appendTo, prependTo, insertBefore, insertAfter, 和 replaceAll这个几个方法成为一个破坏性操作，返回值是所有被追加的内容，而不仅仅是先前所选中的元素。所以，要选择先前选中的元素，需要使用end()方法。
    $("<p/>").appendTo("div").addClass("test").end().addClass("test2");


7.包裹节点
方法                      描述                                                               示例
wrap(html|ele|fn)         把所有匹配的元素分别用其他元素的结构化标记包裹起来                 $("p").wrap("<div class='wrap'></div>") 把所有的段落用一个新创建的div包裹起来
unwrap()                  这个方法将元素的父元素移除。这能快速取消 .wrap()方法的效果         $("p").unwrap() 移除p元素的父元素
wrapAll(html|ele)         将所有匹配的元素用单个元素包裹起来，如果中间隔着其他元素会被移动   $("p").wrapAll("<div></div>") 将所有p元素包裹在同一个div内，如果p元素和p元素直接有其他元素，元素位置会发生变化
wrapInner(html|ele|fn)    将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来     $("p").wrapInner(document.createElement("b")) 把所有段落内的每个子内容加粗


8.属性操作
方法                                  描述                                       示例
attr(name|properties|key,value|fn)    设置或返回被选元素的属性值                 $("img").attr("src") 返回文档中所有图像的src属性值
removeAttr(name)                      从每一个匹配的元素中删除一个属性           $("img").removeAttr("src") 将文档中图像的src属性删除
1.6+
prop(n|p|k,v|f)                       获取在匹配的元素集中的第一个元素的属性值   $("input[type='checkbox']").prop("disabled", false); 禁用页面上所有的复选框
removeProp(name)                      用来删除由.prop()方法设置的属性集          $para.removeProp("luggageCode") 删除jQuery对象para的属性luggageCode

.prop()方法应该被用来处理boolean attributes/properties以及在html(比如：window.location,document)中不存在的properties。其他所有的attributes(在html中你看到的那些)可以而且应该继续使用.attr()方法来进行操作

属性 name|properties|key,value|fn 说明
(1)name String 属性名称
$("img").attr("src");  //返回文档中所有图像的src属性值

(2)properties Map 作为属性的“名/值对”对象
$("img").attr({ src: "test.jpg", alt: "Test Image" }); //为所有图像设置src和alt属性

(3)key,value String,Objec 属性名称，属性值
$("input[type='checkbox']").prop("disabled", false); $("input[type='checkbox']").prop("checked", true); //禁用和选中所有页面上的复选框

(4)key,function(index, attr) String,Function 1.属性名称 2:返回属性值的函数,参数1当前元素的索引值，参数2原先的属性值。
$("input[type='checkbox']").prop("checked", function( i, val ) {
  return !val;
}); //通过函数来设置所有页面上的复选框被选中


9.样式操作
(1)获取样式和设置样式 attr
class是元素的属性，所以获取class和设置class都可以用attr方法来完成
获取  var p_class = $("p").attr("class");
设置  $("p").attr("class", "high");

(2)追加、移除、切换和判断是否含有某个样式
方法                              描述                                       示例
addClass(class|fn(index, class))  为每个匹配的元素添加指定的类名             $("p").addClass("selected1 selected2") 为匹配的元素加上'selected'类
removeClass([class|fn])           从所有匹配的元素中删除全部或者指定的类     $('li:last').removeClass(function() { return $(this).prev().attr('class')}); 删除最后一个元素上与前面重复的class
toggleClass(class|fn[,sw])        如果存在（不存在）就删除（添加）一个类     $("p").toggleClass("selected") 为匹配的元素切换'selected'类
hasClass(class)                   检查当前的元素是否含有某个特定的类，如果有，则返回true。这其实就是 is("." + class)


10.设置和获取HTML、文本和值
方法                   描述                                          示例
html([val|fn])         取得第一个匹配元素的html内容。innerHTML       $("p").html("Hello <b>world</b>!") 设置所有 p 元素的内容
text([val|fn])         取得所有匹配元素的内容,相当于innerText        $('p').text() 返回p元素的文本内容
val([val|fn|arr])      获得匹配元素的当前值                          $("input").val(["check2", "radio1"]) 设定一个select和一个多选的select的值


11.遍历节点
方法                                描述                                                                                    示例
children([expr])                    取得一个包含匹配的子元素集合，不考虑后代元素                                        $("div").children(".selected") 在每个div中查找类为selected的元素
offsetParent()                      返回父元素中第一个其position设为relative或者absolute的元素,仅对可见元素有效         $("p").offsetParent()
find(expr|obj|ele)                  搜索所有与指定表达式匹配的元素。找出正在处理的元素的后代元素，等价于$("A B")        $("p").find("span") 从所有的段落开始，进一步搜索下面的span元素。与$("p span")相同
closest(expr|object|element)        从元素本身开始，逐级向上级元素匹配，并返回最先匹配的元素                            $(e.target).closest("li").toggleClass("hilight"); 展示如何使用clostest来完成事件委托
parent([expr])                      取得一个包含着所有匹配元素的唯一父元素的元素集合                                    $("p").parent() 查找每个段落的父元素
parents([expr])                     取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）                      $("span").parents("p") 找到每个span的所有是p元素的祖先元素
parentsUntil([e|e][,f])             查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止                            $('li.item-a').parentsUntil('.level-1') 查找item-a的祖先，但不包括level-1
next([expr])                        取得每个匹配元素后面紧邻的同辈元素，等价于$("A+B")                                  $("p").next() 找到每个段落的后面紧邻的同辈元素
nextAll([expr])                     查找当前元素之后所有的同辈元素,等价于$("A~B")                                       $("#two").nextAll("div") 选择id为two的元素后面的所有div同辈元素
nextUntil([expr|element][,filter])  查找当前元素之后所有的同辈元素，直到遇到匹配的那个元素(不包含)为止                  $("#t1").nextUntil($("#t3"), "dd") 向后选取id为t1到id为t3之间的所有同辈dd元素,不包括t1和t3
prev([expr])                        取得每个匹配元素前面紧邻的同辈元素                                                  $("p").prev() 找到每个段落的前面紧邻的同辈元素
prevAll([expr])                     查找当前元素之前所有的同辈元素                                                      $("#two").prevAll("div") 选择id为two的元素前面的所有div同辈元素
prevUntil([exp|ele][,fil])          查找当前元素之前所有的同辈元素，直到遇到匹配的那个元素为止,如果没有选择器匹配到，或者没有提供参数，那么排在前面的所有同辈元素都会被选中。这就跟用没有提供参数的 .prevAll()效果一样。
siblings([expr])                    取得每个匹配元素的同辈元素                                                          $("div").siblings() 找到每个div的所有同辈元素

closest和parents的主要区别是：
    1，前者从当前元素开始匹配寻找，后者从父元素开始匹配寻找；
    2，前者逐级向上查找，直到发现匹配的元素后就停止了，后者一直向上查找直到根元素，然后把这些元素放进一个临时集合中，再用给定的选择器表达式去过滤；
    3，前者返回0或1个元素，后者可能包含0个，1个，或者多个元素。


12.CSS-DOM操作
CSS                                 描述                                                      示例
css(name|pro|[,val|fn])1.9*         访问匹配元素的样式属性                                    $("p").css("opacity","0.5") p元素为半透明；$(e).css("height") 样式设置的高度
jQuery.cssHooks                     直接向 jQuery 中添加钩子，用于覆盖设置或获取特定 CSS 属性时的方法，目的是为了标准化 CSS 属性名或创建自定义属性
位置
offset([coordinates])               获取匹配元素在当前视口的相对偏移，只对可见元素有效        $("p:last").offset({ top: 10, left: 30 }) 设置元素p相对窗口偏移值
position()                          获取匹配元素相对父元素的偏移，只对可见元素有效            $("p").position().left 获取元素相对父元素偏移值
scrollTop([val])                    获取匹配元素相对滚动条顶部的偏移，对可见和隐藏元素均有效  $("textarea").scrollTop(300) 元素的垂直滚动条滚动到指定位置
scrollLeft([val])                   获取匹配元素相对滚动条左侧的偏移，对可见和隐藏元素均有效  $("textarea").scrollLeft(300) 元素的横向滚动条滚动到指定位置
尺寸
height([val|fn])                    取得匹配元素当前计算的高度值（px），可以用来获取 window 和 document 的高
width([val|fn])                     取得第一个匹配元素当前计算的宽度值（px），可以用来获取 window 和 document 的宽
innerHeight()                       获取第一个匹配元素内部区域高度（包括补白、不包括边框，此方法对可见和隐藏元素均有效
innerWidth()                        获取第一个匹配元素内部区域宽度（包括补白、不包括边框），此方法对可见和隐藏元素均有效。
outerHeight([options])              获取第一个匹配元素外部高度（默认包括补白、不包括边框），此方法对可见和隐藏元素均有效。 options,Boolean默认值:'false' 设置为 true 时，计算边距在内。
outerWidth([options])               获取第一个匹配元素外部宽度（默认包括补白、不包括边框），此方法对可见和隐藏元素均有效。 options,Boolean默认值:'false' 设置为 true 时，计算边距在内。


